package it.cnr.isti.pad;

import java.io.IOException;
import java.io.OutputStream;
import org.apache.commons.io.LineIterator;
import java.util.*;
import org.apache.hadoop.fs.FileSystem;
import org.apache.commons.io.IOUtils;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.SequenceFile;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.KeyValueTextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
import org.apache.hadoop.mapreduce.Counter;
import org.apache.hadoop.mapreduce.Counters;
import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;

public class Parser
{
	public static class PageParser extends Mapper<Text, Text, Text, Text>
	{
		public void map(Text key, Text value, Context context) throws IOException, InterruptedException
		{
			Text map_key = new Text();
			Text map_value = new Text();
			String[] entry=key.toString().split("\\,");
			if(entry[1].equals("0")){
				map_key.set(entry[2]);
				map_value.set(entry[0]);
				context.write(map_key,map_value);
			}  
		}
	}

	public static class PagelinkParser_Map extends Mapper<Text, Text, Text, PairWritable>
	{
		private int nodes_number;
		public void map(Text key, Text value, Context context) throws IOException, InterruptedException
		{
			Text map_key = new Text();
			PairWritable map_value = new PairWritable();
			String[] entry=key.toString().split("\\,");
			if(entry.length>1){
				if(entry[1].equals("0")){
					map_key.set(entry[2]);
					map_value.set(1.0/nodes_number,entry[0]);
					context.write(map_key,map_value);
					System.out.println(map_key+","+map_value.getPagerank()+"	"+map_value.getAdj_list().toString());
				}
			}else{
				map_value.set(Double.NaN,value.toString());
				context.write(key,map_value);
				System.out.println(key+","+map_value.getPagerank()+"	"+map_value.getAdj_list().toString());
			}
		}
		@Override
		protected void setup(Context context) throws IOException, InterruptedException {
			this.nodes_number = context.getConfiguration().getInt("NODES_NUMBER", 0);
		}
	}

	public static class PagelinkParser_Red extends Reducer<Text, PairWritable, Text, PairWritable>
	{

		public void reduce(Text key, Iterable<PairWritable> values, Context context) throws IOException, InterruptedException
		{
			Text red_key = new Text();
			PairWritable red_value = new PairWritable();
			String[] entry;
			String adj_list="";
			boolean isActive=false;
			double pagerank=0;
			for (PairWritable val:values){
				if(Double.isNaN(val.getPagerank().get())){
					red_key.set(val.getAdj_list().toString());
					isActive=true;
				}else{
					adj_list+=val.getAdj_list().toString()+" ";
					pagerank=val.getPagerank().get();
				}
			}
			if(isActive){
				red_value.set(pagerank,adj_list);
				context.write(red_key,red_value);
			}
		}

	}

	public static class Simple_Parser extends Mapper<Text, Text, Text, PairWritable>
	{	
		private int nodes_number;

		public void map(Text key, Text value, Context context) throws IOException, InterruptedException
		{
			PairWritable map_value = new PairWritable();
			map_value.set(1.0/nodes_number,value.toString());
			map_value.setNode(true);
			context.write(key,map_value);
			System.out.println(key.toString()+"	"+map_value.getPagerank().get()+"	"+map_value.getAdj_list().toString());
		}

		@Override
		protected void setup(Context context) throws IOException, InterruptedException {
			this.nodes_number = context.getConfiguration().getInt("NODES_NUMBER", 0);
		}
	}
	/*public static void main(String[] args) throws Exception
	{	
		Configuration conf = new Configuration();
		Path inputPath = new Path(args[0]);
		Path outputPath = new Path(args[2]);
		
		Job job_parser = new Job(conf, "Parse Page");

		Path parserOutputPath = new Path(outputPath,"parsed_"+args[0].split("\\.")[0]);
		job_parser.setJarByClass(Parser.class);
		job_parser.setOutputKeyClass(Text.class);
		job_parser.setOutputValueClass(Text.class);
		job_parser.setMapperClass(PageParser.class);
		job_parser.setInputFormatClass(KeyValueTextInputFormat.class);
		FileInputFormat.setInputPaths(job_parser, inputPath);
		FileOutputFormat.setOutputPath(job_parser, parserOutputPath);
		job_parser.waitForCompletion(true);

		inputPath = new Path(args[1]);
		job_parser = new Job(conf, "Parse Pagelink");

		Path parserOutputPath1 = new Path(outputPath,"parsed_"+args[1].split("\\.")[0]);
		job_parser.setJarByClass(Parser.class);
		job_parser.setOutputKeyClass(Text.class);
		job_parser.setOutputValueClass(PairWritable.class);
		job_parser.setMapperClass(PagelinkParser_Map.class);
		job_parser.setReducerClass(PagelinkParser_Red.class);
		MultipleInputs.addInputPath(job_parser, parserOutputPath, KeyValueTextInputFormat.class, PagelinkParser_Map.class);
		MultipleInputs.addInputPath(job_parser, inputPath, KeyValueTextInputFormat.class, PagelinkParser_Map.class);
		job_parser.setOutputFormatClass(SequenceFileOutputFormat.class);
		FileOutputFormat.setOutputPath(job_parser, parserOutputPath1);
		job_parser.waitForCompletion(true);
	}*/
}

		